package com.text.encoder.gui;

import java.awt.Button;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Label;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Properties;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JCheckBox;

import com.text.encoder.PointerCalculator;
import com.text.encoder.FontSheetTextGenerator;
import com.text.encoder.TextEncoder;

/**
 * This GUI class is mostly generated by Eclipse.
 * 
 * @author TrekkiesUnite118
 *
 */
public class TwoCharacterTextEncoder {

    private JFrame frmTwoCharacterText;
    private static Properties properties;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    InputStream in = new FileInputStream("encoder.properties");
                    properties = new Properties();
                    properties.load(in);
                    TwoCharacterTextEncoder window = new TwoCharacterTextEncoder();
                    window.frmTwoCharacterText.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the application.
     */
    public TwoCharacterTextEncoder() {
        initialize();
    }

    /**
     * Initialize the contents of the frame.
     */
    private void initialize() {
        frmTwoCharacterText = new JFrame();
        frmTwoCharacterText.setTitle("Two Character Text Encoder");
        frmTwoCharacterText.setBounds(100, 100, 613, 292);
        frmTwoCharacterText.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JMenuBar menuBar = new JMenuBar();
        frmTwoCharacterText.setJMenuBar(menuBar);
        
        JMenu mnFile = new JMenu("File");
        menuBar.add(mnFile);
        
        JMenuItem mntmQuit = new JMenuItem("Quit");
        mntmQuit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        mnFile.add(mntmQuit);
        frmTwoCharacterText.getContentPane().setLayout(null);
                
        Label parserTitle = new Label("Two Character Text Encoder");
        parserTitle.setFont(new Font("Arial", Font.BOLD, 14));
        parserTitle.setBounds(10, 13, 227, 22);
        frmTwoCharacterText.getContentPane().add(parserTitle);
                
        Label optionLabel = new Label("Options");
        optionLabel.setFont(new Font("Arial", Font.PLAIN, 12));
        optionLabel.setBounds(466, 13, 85, 22);
        frmTwoCharacterText.getContentPane().add(optionLabel);
        
        Label inputTextFileLabel = new Label("Input Text File");
        inputTextFileLabel.setFont(new Font("Arial", Font.PLAIN, 11));
        inputTextFileLabel.setBounds(10, 41, 121, 22);
        frmTwoCharacterText.getContentPane().add(inputTextFileLabel);
        
        TextField inputTextFileField = new TextField();
        inputTextFileField.setBounds(137, 41, 283, 22);
        frmTwoCharacterText.getContentPane().add(inputTextFileField);
        
        Button inputTextFileSearchButton = new Button("...");
        inputTextFileSearchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnVal = chooser.showOpenDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                   System.out.println("You chose to open this file: " +
                        chooser.getSelectedFile().getName());
                   inputTextFileField.setText(chooser.getSelectedFile().getAbsolutePath());
                }
            }
        });
        inputTextFileSearchButton.setBounds(426, 41, 22, 22);
        frmTwoCharacterText.getContentPane().add(inputTextFileSearchButton);
        
        Label inputPointerFileLabel = new Label("Input Pointer File");
        inputPointerFileLabel.setFont(new Font("Arial", Font.PLAIN, 11));
        inputPointerFileLabel.setBounds(10, 69, 121, 22);
        frmTwoCharacterText.getContentPane().add(inputPointerFileLabel);
        
        TextField inputPointerFileField = new TextField();
        inputPointerFileField.setBounds(137, 69, 283, 22);
        frmTwoCharacterText.getContentPane().add(inputPointerFileField);
        
        Button inputPointerFileSearchButton = new Button("...");
        inputPointerFileSearchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnVal = chooser.showOpenDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                   System.out.println("You chose to open this file: " +
                        chooser.getSelectedFile().getName());
                   inputPointerFileField.setText(chooser.getSelectedFile().getAbsolutePath());
                }
            }
        });
        inputPointerFileSearchButton.setBounds(426, 69, 22, 22);
        frmTwoCharacterText.getContentPane().add(inputPointerFileSearchButton);
        
        JCheckBox chckbxAllUpperCase = new JCheckBox("All Upper Case?");
        chckbxAllUpperCase.setBounds(476, 41, 121, 22);
        frmTwoCharacterText.getContentPane().add(chckbxAllUpperCase);
        
        JCheckBox chckbxWritePieces = new JCheckBox("Write Pieces?");
        chckbxWritePieces.setBounds(476, 69, 107, 22);
        frmTwoCharacterText.getContentPane().add(chckbxWritePieces);
        
        TextField newTextField = new TextField();
        newTextField.setBounds(137, 97, 283, 22);
        frmTwoCharacterText.getContentPane().add(newTextField);
        
        Button newTextFileSearchButton = new Button("...");
        newTextFileSearchButton.setBounds(426, 97, 22, 22);
        newTextFileSearchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnVal = chooser.showOpenDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                   System.out.println("You chose to open this file: " +
                        chooser.getSelectedFile().getName());
                   newTextField.setText(chooser.getSelectedFile().getAbsolutePath());
                }
            }
        });
        frmTwoCharacterText.getContentPane().add(newTextFileSearchButton);
        
        Label newTextFileLabel = new Label("New Text File");
        newTextFileLabel.setFont(new Font("Arial", Font.PLAIN, 11));
        newTextFileLabel.setBounds(10, 97, 121, 22);
        frmTwoCharacterText.getContentPane().add(newTextFileLabel);
        
        Button parseButton = new Button("Encode and Generate");
        parseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String outputFileDirectory = properties.getProperty("encoder.output.directory")+"\\";
                String outputPiecesDirectory = properties.getProperty("encoder.output.pieces.directory") + "\\";
                String inputTextFile = inputTextFileField.getText();
                String inputPointerFile = inputPointerFileField.getText();
                int firstVal = Integer.valueOf(properties.getProperty("encoder.font.firstValue"));
                boolean upperCase = chckbxAllUpperCase.isSelected();
                boolean createPieces = chckbxWritePieces.isSelected();
                int firstPointer = Integer.valueOf(properties.getProperty("encoder.firstPointer.value"));
                int lastPointer = Integer.valueOf(properties.getProperty("encoder.lastPointer.value"));
                
                String newTextFile = newTextField.getText();
                
                PointerCalculator pointerCalc = new PointerCalculator().finalPointer(lastPointer)
                        .startingPointer(firstPointer)
                        .generatePointerTextPieces(createPieces)
                        .inputOrigTextFileName(inputTextFile)
                        .inputPointerFileName(inputPointerFile)
                        .outputFilePath(outputFileDirectory)
                        .pointerTextOutputFilePath(outputPiecesDirectory)
                        .properties(properties);
                TextEncoder encoder = new TextEncoder()
                        .fileName("EncodedText")
                        .firstValue(firstVal)
                        .outputFilePath(outputFileDirectory)
                        .toUpper(upperCase)
                        .properties(properties);
                
                FontSheetTextGenerator generator = new FontSheetTextGenerator()
                        .fileName("FontSheetText.txt")
                        .outputFilePath(outputFileDirectory);
                
                System.out.println("Attempting to parse files...");
                parseButton.setEnabled(false);
                
                try {
                    File text = new File(newTextFile);
                    byte[] textBytes = Files.readAllBytes(text.toPath());
                    String orig = new String(textBytes);
                    encoder.encodeString(orig);
                    generator.generateFontSheetTextFile(encoder.getPairEncodingMap());
                    pointerCalc.calculatePointers(orig);
                } catch (IOException e1) {
                    parseButton.setEnabled(true);
                    e1.printStackTrace();
                }
                
                parseButton.setEnabled(true);
            }
        });
        parseButton.setFont(new Font("Arial", Font.PLAIN, 20));
        parseButton.setBounds(10, 139, 446, 59);
        frmTwoCharacterText.getContentPane().add(parseButton);
        
    }
}
